{
    "scopeName": "source.ms",
    "name": "Manuscript",
    "patterns": [
        { "include": "#comments" },
        { "include": "#keywords" },
        { "include": "#strings" },
        { "include": "#numbers" },
        { "include": "#operators" },
        { "include": "#punctuation" },
        { "include": "#variables" },
        { "include": "#constants" }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.double-slash.ms",
                    "match": "//.*"
                },
                {
                    "name": "comment.block.ms",
                    "begin": "/\\*",
                    "end": "\\*/",
                    "patterns": [
                        { "include": "#comments" } 
                    ]
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.flow.ms",
                    "match": "\\b(if|else|for|while|in|match|case|default|return|yield|break|continue)\\b"
                },
                {
                    "name": "keyword.declaration.ms",
                    "match": "\\b(let|fn|type|interface|extends|import|export|extern|methods|as|from)\\b"
                },
                {
                    "name": "keyword.operator.word.ms",
                    "match": "\\b(as)\\b" 
                },
                {
                    "name": "keyword.errorhandling.ms",
                    "match": "\\b(check|try)\\b"
                },
                {
                    "name": "keyword.concurrency.ms",
                    "match": "\\b(go|async|await|defer)\\b" 
                },
                {
                    "name": "storage.type.ms",
                    "match": "\\b(bool|string|void|number|i8|i16|i32|i64|int|uint8|uint16|uint32|uint64|f32|f64|long|double)\\b"
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "name": "string.quoted.single.ms",
                    "begin": "'",
                    "end": "'",
                    "patterns": [
                        { "include": "#string_escapes" },
                        { "include": "#string_interpolation" }
                    ]
                },
                {
                    "name": "string.quoted.double.ms",
                    "begin": "\"",
                    "end": "\"",
                    "patterns": [
                        { "include": "#string_escapes" },
                        { "include": "#string_interpolation" }
                    ]
                },
                {
                    "name": "string.block.triple-single.ms",
                    "begin": "'''",
                    "end": "'''",
                    "patterns": [
                        { "include": "#string_interpolation_tagged_block" }
                    ]
                },
                {
                    "name": "string.block.triple-double.ms",
                    "begin": "\"\"\"",
                    "end": "\"\"\"",
                    "patterns": [
                        { "include": "#string_interpolation_tagged_block" }
                    ]
                },
                {
                    "name": "meta.tagged-template.ms",
                    "begin": "([a-zA-Z_][a-zA-Z0-9_]*)\\s*(''')",
                    "beginCaptures": {
                        "1": { "name": "entity.name.function.tag.ms" },
                        "2": { "name": "punctuation.definition.string.begin.ms" }
                    },
                    "end": "(''')",
                    "endCaptures": {
                        "1": { "name": "punctuation.definition.string.end.ms" }
                    },
                    "patterns": [
                        { "include": "#string_interpolation_tagged_block" }
                    ]
                },
                {
                    "name": "meta.tagged-template.ms",
                    "begin": "([a-zA-Z_][a-zA-Z0-9_]*)\\s*(\"\"\")",
                    "beginCaptures": {
                        "1": { "name": "entity.name.function.tag.ms" },
                        "2": { "name": "punctuation.definition.string.begin.ms" }
                    },
                    "end": "(\"\"\")",
                    "endCaptures": {
                        "1": { "name": "punctuation.definition.string.end.ms" }
                    },
                    "patterns": [
                        { "include": "#string_interpolation_tagged_block" }
                    ]
                },
                {
                    "name": "meta.tagged-template.ms",
                    "begin": "([a-zA-Z_][a-zA-Z0-9_]*)\\s*(')",
                    "beginCaptures": {
                        "1": { "name": "entity.name.function.tag.ms" },
                        "2": { "name": "punctuation.definition.string.begin.ms" }
                    },
                    "end": "(')",
                    "endCaptures": {
                        "1": { "name": "punctuation.definition.string.end.ms" }
                    },
                    "patterns": [
                        { "include": "#string_escapes" },
                        { "include": "#string_interpolation" }
                    ]
                },
                {
                    "name": "meta.tagged-template.ms",
                    "begin": "([a-zA-Z_][a-zA-Z0-9_]*)\\s*(\")",
                    "beginCaptures": {
                        "1": { "name": "entity.name.function.tag.ms" },
                        "2": { "name": "punctuation.definition.string.begin.ms" }
                    },
                    "end": "(\")",
                    "endCaptures": {
                        "1": { "name": "punctuation.definition.string.end.ms" }
                    },
                    "patterns": [
                        { "include": "#string_escapes" },
                        { "include": "#string_interpolation" }
                    ]
                }
            ]
        },
        "string_escapes": {
            "patterns": [
                {
                    "name": "constant.character.escape.ms",
                    "match": "\\\\(\\\\|[nrt\"']|u\\{[0-9a-fA-F]{1,6}\\})"
                }
            ]
        },
        "string_interpolation": {
            "patterns": [
                {
                    "name": "meta.embedded.interpolation.ms",
                    "begin": "\\$\\{",
                    "end": "\\}",
                    "patterns": [
                        { "include": "$self" } 
                    ]
                }
            ]
        },
        "string_interpolation_tagged_block": {
             "patterns": [
                {
                    "name": "meta.embedded.interpolation.ms",
                    "begin": "(?<!\\\\)\\$\\{", 
                    "end": "\\}",
                    "patterns": [
                        { "include": "$self" }
                    ]
                }
            ]
        },
        "numbers": {
            "patterns": [
                {
                    "name": "constant.numeric.float.ms",
                    "match": "\\b[0-9]+\\.[0-9]+([eE][+-]?[0-9]+)?(f32|f64)?\\b"
                },
                {
                    "name": "constant.numeric.integer.binary.ms",
                    "match": "\\b0b[01_]+(i8|i16|i32|i64|int|u8|u16|u32|u64)?\\b"
                },
                {
                    "name": "constant.numeric.integer.octal.ms",
                    "match": "\\b0o[0-7_]+(i8|i16|i32|i64|int|u8|u16|u32|u64)?\\b"
                },
                {
                    "name": "constant.numeric.integer.hex.ms",
                    "match": "\\b0x[0-9a-fA-F_]+(i8|i16|i32|i64|int|u8|u16|u32|u64)?\\b"
                },
                {
                    "name": "constant.numeric.integer.decimal.ms",
                    "match": "\\b[0-9_]+(i8|i16|i32|i64|int|u8|u16|u32|u64)?\\b"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "name": "keyword.operator.arithmetic.ms",
                    "match": "\\-|\\+|\\*|/|%"
                },
                {
                    "name": "keyword.operator.comparison.ms",
                    "match": "==|!=|<=?|>=?"
                },
                {
                    "name": "keyword.operator.logical.ms",
                    "match": "\\&\\&|\\|\\||!"
                },
                {
                    "name": "keyword.operator.assignment.ms",
                    "match": "="
                },
                {
                    "name": "keyword.operator.assignment.compound.ms",
                    "match": "\\+=|-=|\\*=|/=|%="
                },
                 {
                    "name": "keyword.operator.bitwise.ms",
                    "match": "\\&|\\||\\^|<<|>>"
                },
                {
                    "name": "keyword.operator.null-coalescing.ms",
                    "match": "\\?\\."
                },
                 {
                    "name": "keyword.operator.error-indication.ms",
                    "match": "!"
                }
            ]
        },
        "punctuation": {
            "patterns": [
                { "name": "punctuation.terminator.statement.ms", "match": ";" },
                { "name": "punctuation.accessor.dot.ms", "match": "\\." },
                { "name": "punctuation.separator.comma.ms", "match": "," },
                { "name": "punctuation.separator.colon.ms", "match": ":" },
                { "name": "meta.brace.round.ms", "match": "\\(|\\)" },
                { "name": "meta.brace.square.ms", "match": "\\[|\\]" },
                { "name": "meta.brace.curly.ms", "match": "\\{|\\}" },
                { "name": "meta.angle.bracket.ms", "match": "<|>" }
            ]
        },
        "variables": {
            "patterns": [
                {
                    "name": "variable.other.ms",
                    "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
                },
                {
                    "name": "variable.parameter.ms",
                    "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)(?=\\s*([a-zA-Z_][a-zA-Z0-9_]*(\\[\\]|\\?)?))"
                }
            ]
        },
        "constants": {
            "patterns": [
                {
                    "name": "constant.language.boolean.ms",
                    "match": "\\b(true|false)\\b"
                },
                {
                    "name": "constant.language.null.ms",
                    "match": "\\bnull\\b"
                },
                {
                    "name": "constant.language.void.ms",
                    "match": "\\bvoid\\b" 
                }
            ]
        }
    }
}
