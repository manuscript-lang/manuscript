---
description: Adding any language feature, fixing bugs in code generation, find descrepancies in generated go code
globs: 
alwaysApply: false
---
# Updating Go Visitor Logic

After modifying the grammar (`.g4` files) and regenerating the parser (`make generate_parser`), the Go visitor code often needs updates to reflect these changes.

1.  **Visitor Files**:
    *   The primary visitor logic is located in `[visitor.go](mdc:internal/visitor/visitor.go)` (for main structure and helpers) and `[statements.go](mdc:internal/visitor/statements.go)` (and other similar files for specific AST node types).

2.  **Implement/Update `VisitXyz` Methods**:
    *   For new or changed parser rules (e.g., `forStmt`), you'll need to add or modify corresponding `VisitForStmt` methods in the visitor.
    *   These methods take a context object (e.g., `*parser.ForStmtContext`) as an argument.

3.  **Use Correct ANTLR Context Accessors**:
    *   When accessing elements defined in your grammar rules (like `block`, `condition`, `loopVars`, `cStyleInit`), use the getter methods provided on the context object.
    *   These are typically named `GetXyz()` (e.g., `ctx.GetBlock()`, `ctx.GetLoopVars()`).
    *   Refer to the generated parser code in `[manuscript_parser.go](mdc:internal/parser/manuscript_parser.go)` to find the exact names of these context structs and their accessor methods if you are unsure.

4.  **AST Node Generation**:
    *   Visitor methods should return appropriate `go/ast` nodes that represent the Manuscript code.
    *   Ensure correct `token.Pos` is used, though `gotoken.NoPos` can be a placeholder during initial development.

5.  **Error Handling**:
    *   Use the `addError(message string, token antlr.Token)` method, which utilizes `NewCompilationError` from `[errors.go](mdc:internal/visitor/errors.go)`, for reporting compilation errors.
