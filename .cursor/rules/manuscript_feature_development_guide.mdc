---
description: 
globs: 
alwaysApply: false
---
# Manuscript Language Feature Development Guide

This guide outlines the steps for adding new language features or modifying existing ones in the Manuscript compiler.

## 1. Update Grammar
- Parser Grammar: Modify parser rules in `[internal/grammar/Manuscript.g4](mdc:internal/grammar/Manuscript.g4)`.
- Lexer Grammar: If new keywords or token types are needed, update lexer rules in `[internal/grammar/ManuscriptLexer.g4](mdc:internal/grammar/ManuscriptLexer.g4)`. Remember that token order in the lexer can be significant.
- Pay close attention to expression rule precedence if modifying expressions (e.g., `logicalOrExpr` -> `logicalAndExpr` -> ... -> `primaryExpr`).

## 2. Regenerate Parser
- After any changes to `.g4` files, you **must** regenerate the parser and lexer.
- Run the command: `make generate_parser` from the workspace root.
- **Do Not Edit Generated Code**: Files in `[internal/parser/](mdc:internal/parser)` (e.g., `[internal/parser/manuscript_parser.go](mdc:internal/parser/manuscript_parser.go)`) are auto-generated by ANTLR.

## 3. Update Visitor
- The main AST visitor is `[internal/visitor/visitor.go](mdc:internal/visitor/visitor.go)`.
- Implement or update `Visit<RuleName>` methods for any new or modified grammar rules.
- Key visitor files for expressions and declarations:
    - `[internal/visitor/expr.go](mdc:internal/visitor/expr.go)`
    - `[internal/visitor/literal.go](mdc:internal/visitor/literal.go)`
    - `[internal/visitor/binary_expressions.go](mdc:internal/visitor/binary_expressions.go)`
    - `[internal/visitor/declarations.go](mdc:internal/visitor/declarations.go)`
- Ensure that:
    - Each expression-related grammar rule has a corresponding visitor method.
    - Visitor methods correctly handle their child contexts (operands).
    - Visitor methods return the appropriate Go AST node type (e.g., `ast.Expr` for expressions, `ast.Stmt` for statements).
    - For binary expressions, the `buildChainedBinaryExpressionAst` helper in `[internal/visitor/binary_expressions.go](mdc:internal/visitor/binary_expressions.go)` is often used. Its `assertAndGetOperand` function must correctly assert the type of child operands based on the grammar.

## 4. Add Tests
- Add new test cases or modify existing ones in the `[tests/compilation/](mdc:tests/compilation)` directory.
- Follow the structure of existing test files like `[tests/compilation/basic.md](mdc:tests/compilation/basic.md)`.
- A typical test includes Manuscript code (`ms`) and the expected generated Go code (`go`).

## 5. Run Tests
- Run tests for a specific file using: `make test-file f=<filename_without_extension> debug`
- Example: `make test-file f=basic debug`
- Ensure all tests pass.
