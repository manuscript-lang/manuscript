---
description: 
globs: 
alwaysApply: true
---

# How to write comments
- DO NOT write excessive comments 
- DO NOT add comments in code every few lines
- DO write insightful comments about reasoning behind the code

# How to write code
- DO write simple concise code, do not overcomplicate
- DO write as little code as possible to achieve the task
- DO review the code after writing it, clean up for readability, conciseness, and efficiency
- DO follow DRY, do not repeat same blocks of code
- DO follow structured logging
- DO NOT leave commented code in file
- DO use short names for variables
- DO create utility function and extract common logic
- ALWAYS use VisitXXX methods when possible, top level visitors are always prefered
- DO NOT read parser code, it is large, instead infer name from grammar definition 

# How to write manuscript code
- DO refer language-design.md for understanding available constructs

# How to add or edit a language feature
1. Update grammar
1.1 determine if Lexer change is needed, then update the Lexer as well, IMPORTANT lexer is order sensitive
2. Regenerate parser
3. Update visitor
4. Add tests in tests/compilation
5. Run the tests and make them pass

# How to write tests
- DO add lots of tests after making a change
- DO ensure tests have complete and total coverage
- DO add tests for boundary conditions, invalid inputs
- DO NOT add comments in expected go code
- DO follow this structure for compilation tests
- DO use 4 space indents for go code
- DO use 2 space indent for manuscript code

{title for the test}
---
# {test name}
```ms
// manuscript code
```
```go
// go code
```
- DO output go code as go/ast package would, go code is generated using ast, thus should be in cannonical form
- DO NOT create a new a file if test is covered already, always prefer to add it in existing files